# coding: utf-8

"""
    CCCS

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2005(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'object',
        'project_id': 'str',
        'required': 'bool',
        'sequence': 'int',
        'title': 'str'
    }

    attribute_map = {
        'content': 'content',
        'project_id': 'project_id',
        'required': 'required',
        'sequence': 'sequence',
        'title': 'title'
    }

    def __init__(self, content=None, project_id=None, required=None, sequence=None, title=None):  # noqa: E501
        """InlineResponse2005 - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._project_id = None
        self._required = None
        self._sequence = None
        self._title = None
        self.discriminator = None

        self.content = content
        self.project_id = project_id
        self.required = required
        self.sequence = sequence
        self.title = title

    @property
    def content(self):
        """Gets the content of this InlineResponse2005.  # noqa: E501


        :return: The content of this InlineResponse2005.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse2005.


        :param content: The content of this InlineResponse2005.  # noqa: E501
        :type: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def project_id(self):
        """Gets the project_id of this InlineResponse2005.  # noqa: E501


        :return: The project_id of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this InlineResponse2005.


        :param project_id: The project_id of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def required(self):
        """Gets the required of this InlineResponse2005.  # noqa: E501


        :return: The required of this InlineResponse2005.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this InlineResponse2005.


        :param required: The required of this InlineResponse2005.  # noqa: E501
        :type: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required

    @property
    def sequence(self):
        """Gets the sequence of this InlineResponse2005.  # noqa: E501


        :return: The sequence of this InlineResponse2005.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this InlineResponse2005.


        :param sequence: The sequence of this InlineResponse2005.  # noqa: E501
        :type: int
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def title(self):
        """Gets the title of this InlineResponse2005.  # noqa: E501


        :return: The title of this InlineResponse2005.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse2005.


        :param title: The title of this InlineResponse2005.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2005):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
