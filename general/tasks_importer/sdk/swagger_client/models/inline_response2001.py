# coding: utf-8

"""
    CCCS

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'object',
        'parent': 'str',
        'source_id': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'content': 'content',
        'parent': 'parent',
        'source_id': 'source_id',
        'user_id': 'user_id'
    }

    def __init__(self, content=None, parent=None, source_id=None, user_id=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501

        self._content = None
        self._parent = None
        self._source_id = None
        self._user_id = None
        self.discriminator = None

        self.content = content
        if parent is not None:
            self.parent = parent
        self.source_id = source_id
        self.user_id = user_id

    @property
    def content(self):
        """Gets the content of this InlineResponse2001.  # noqa: E501


        :return: The content of this InlineResponse2001.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse2001.


        :param content: The content of this InlineResponse2001.  # noqa: E501
        :type: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def parent(self):
        """Gets the parent of this InlineResponse2001.  # noqa: E501


        :return: The parent of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this InlineResponse2001.


        :param parent: The parent of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def source_id(self):
        """Gets the source_id of this InlineResponse2001.  # noqa: E501

        The task or project (or anything with an ID) it is related to  # noqa: E501

        :return: The source_id of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this InlineResponse2001.

        The task or project (or anything with an ID) it is related to  # noqa: E501

        :param source_id: The source_id of this InlineResponse2001.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def user_id(self):
        """Gets the user_id of this InlineResponse2001.  # noqa: E501


        :return: The user_id of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InlineResponse2001.


        :param user_id: The user_id of this InlineResponse2001.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
